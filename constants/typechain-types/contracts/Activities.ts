/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Activities {
  export type ActivityDtoStruct = {
    contractAddress: string;
    name: string;
    reward: BigNumberish;
    isActive: boolean;
  };

  export type ActivityDtoStructOutput = [string, string, number, boolean] & {
    contractAddress: string;
    name: string;
    reward: number;
    isActive: boolean;
  };
}

export interface ActivitiesInterface extends utils.Interface {
  functions: {
    "createActivity(string,uint8,bool)": FunctionFragment;
    "getActivities()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createActivity" | "getActivities"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createActivity",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivities",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivities",
    data: BytesLike
  ): Result;

  events: {
    "ActivityCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivityCreated"): EventFragment;
}

export interface ActivityCreatedEventObject {
  activity: string;
}
export type ActivityCreatedEvent = TypedEvent<
  [string],
  ActivityCreatedEventObject
>;

export type ActivityCreatedEventFilter = TypedEventFilter<ActivityCreatedEvent>;

export interface Activities extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ActivitiesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createActivity(
      _name: string,
      _reward: BigNumberish,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActivities(
      overrides?: CallOverrides
    ): Promise<[Activities.ActivityDtoStructOutput[]]>;
  };

  createActivity(
    _name: string,
    _reward: BigNumberish,
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActivities(
    overrides?: CallOverrides
  ): Promise<Activities.ActivityDtoStructOutput[]>;

  callStatic: {
    createActivity(
      _name: string,
      _reward: BigNumberish,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getActivities(
      overrides?: CallOverrides
    ): Promise<Activities.ActivityDtoStructOutput[]>;
  };

  filters: {
    "ActivityCreated(address)"(activity?: null): ActivityCreatedEventFilter;
    ActivityCreated(activity?: null): ActivityCreatedEventFilter;
  };

  estimateGas: {
    createActivity(
      _name: string,
      _reward: BigNumberish,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActivities(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createActivity(
      _name: string,
      _reward: BigNumberish,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActivities(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
