/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace SharedModel {
  export type PlayerStruct = {
    walletAddress: string;
    nick: string;
    points: BigNumberish;
  };

  export type PlayerStructOutput = [string, string, number] & {
    walletAddress: string;
    nick: string;
    points: number;
  };
}

export interface PlayersInterface extends utils.Interface {
  functions: {
    "addPlayer(address,string)": FunctionFragment;
    "addPoints(address,uint32)": FunctionFragment;
    "ensureWalletExists(address)": FunctionFragment;
    "getPlayer(address)": FunctionFragment;
    "getPlayers()": FunctionFragment;
    "setNick(address,string)": FunctionFragment;
    "substractPoints(address,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPlayer"
      | "addPoints"
      | "ensureWalletExists"
      | "getPlayer"
      | "getPlayers"
      | "setNick"
      | "substractPoints"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPlayer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ensureWalletExists",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPlayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNick",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "substractPoints",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ensureWalletExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "substractPoints",
    data: BytesLike
  ): Result;

  events: {
    "AddedNewPlayer(address,string)": EventFragment;
    "UpdatedPlayersNick(address,string)": EventFragment;
    "UpdatedPlayersPoints(address,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedNewPlayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedPlayersNick"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedPlayersPoints"): EventFragment;
}

export interface AddedNewPlayerEventObject {
  walletAddress: string;
  nick: string;
}
export type AddedNewPlayerEvent = TypedEvent<
  [string, string],
  AddedNewPlayerEventObject
>;

export type AddedNewPlayerEventFilter = TypedEventFilter<AddedNewPlayerEvent>;

export interface UpdatedPlayersNickEventObject {
  _walletAddress: string;
  _newNick: string;
}
export type UpdatedPlayersNickEvent = TypedEvent<
  [string, string],
  UpdatedPlayersNickEventObject
>;

export type UpdatedPlayersNickEventFilter =
  TypedEventFilter<UpdatedPlayersNickEvent>;

export interface UpdatedPlayersPointsEventObject {
  walletAddress: string;
  currentPoints: number;
}
export type UpdatedPlayersPointsEvent = TypedEvent<
  [string, number],
  UpdatedPlayersPointsEventObject
>;

export type UpdatedPlayersPointsEventFilter =
  TypedEventFilter<UpdatedPlayersPointsEvent>;

export interface Players extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlayersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPlayer(
      _walletAddress: string,
      _nick: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPoints(
      _player: string,
      _points: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ensureWalletExists(
      _walletAddress: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getPlayer(
      _walletAddress: string,
      overrides?: CallOverrides
    ): Promise<[SharedModel.PlayerStructOutput]>;

    getPlayers(
      overrides?: CallOverrides
    ): Promise<[SharedModel.PlayerStructOutput[]]>;

    setNick(
      _walletAddress: string,
      _nick: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    substractPoints(
      _player: string,
      _points: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPlayer(
    _walletAddress: string,
    _nick: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPoints(
    _player: string,
    _points: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ensureWalletExists(
    _walletAddress: string,
    overrides?: CallOverrides
  ): Promise<void>;

  getPlayer(
    _walletAddress: string,
    overrides?: CallOverrides
  ): Promise<SharedModel.PlayerStructOutput>;

  getPlayers(
    overrides?: CallOverrides
  ): Promise<SharedModel.PlayerStructOutput[]>;

  setNick(
    _walletAddress: string,
    _nick: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  substractPoints(
    _player: string,
    _points: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPlayer(
      _walletAddress: string,
      _nick: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPoints(
      _player: string,
      _points: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ensureWalletExists(
      _walletAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPlayer(
      _walletAddress: string,
      overrides?: CallOverrides
    ): Promise<SharedModel.PlayerStructOutput>;

    getPlayers(
      overrides?: CallOverrides
    ): Promise<SharedModel.PlayerStructOutput[]>;

    setNick(
      _walletAddress: string,
      _nick: string,
      overrides?: CallOverrides
    ): Promise<void>;

    substractPoints(
      _player: string,
      _points: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedNewPlayer(address,string)"(
      walletAddress?: string | null,
      nick?: null
    ): AddedNewPlayerEventFilter;
    AddedNewPlayer(
      walletAddress?: string | null,
      nick?: null
    ): AddedNewPlayerEventFilter;

    "UpdatedPlayersNick(address,string)"(
      _walletAddress?: string | null,
      _newNick?: null
    ): UpdatedPlayersNickEventFilter;
    UpdatedPlayersNick(
      _walletAddress?: string | null,
      _newNick?: null
    ): UpdatedPlayersNickEventFilter;

    "UpdatedPlayersPoints(address,uint32)"(
      walletAddress?: string | null,
      currentPoints?: null
    ): UpdatedPlayersPointsEventFilter;
    UpdatedPlayersPoints(
      walletAddress?: string | null,
      currentPoints?: null
    ): UpdatedPlayersPointsEventFilter;
  };

  estimateGas: {
    addPlayer(
      _walletAddress: string,
      _nick: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPoints(
      _player: string,
      _points: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ensureWalletExists(
      _walletAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayer(
      _walletAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    setNick(
      _walletAddress: string,
      _nick: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    substractPoints(
      _player: string,
      _points: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPlayer(
      _walletAddress: string,
      _nick: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPoints(
      _player: string,
      _points: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ensureWalletExists(
      _walletAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayer(
      _walletAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNick(
      _walletAddress: string,
      _nick: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    substractPoints(
      _player: string,
      _points: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
