/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ActivityInterface extends utils.Interface {
  functions: {
    "activate()": FunctionFragment;
    "deactivate()": FunctionFragment;
    "getReward()": FunctionFragment;
    "isActive()": FunctionFragment;
    "s_name()": FunctionFragment;
    "s_reward()": FunctionFragment;
    "setName(string)": FunctionFragment;
    "setReward(uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activate"
      | "deactivate"
      | "getReward"
      | "isActive"
      | "s_name"
      | "s_reward"
      | "setName"
      | "setReward"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "activate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deactivate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "s_name", values?: undefined): string;
  encodeFunctionData(functionFragment: "s_reward", values?: undefined): string;
  encodeFunctionData(functionFragment: "setName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setReward",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "s_name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "s_reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReward", data: BytesLike): Result;

  events: {
    "Activated()": EventFragment;
    "Deactivated()": EventFragment;
    "NameChanged(string,string)": EventFragment;
    "RewardChanged(uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Activated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardChanged"): EventFragment;
}

export interface ActivatedEventObject {}
export type ActivatedEvent = TypedEvent<[], ActivatedEventObject>;

export type ActivatedEventFilter = TypedEventFilter<ActivatedEvent>;

export interface DeactivatedEventObject {}
export type DeactivatedEvent = TypedEvent<[], DeactivatedEventObject>;

export type DeactivatedEventFilter = TypedEventFilter<DeactivatedEvent>;

export interface NameChangedEventObject {
  _oldName: string;
  _newName: string;
}
export type NameChangedEvent = TypedEvent<
  [string, string],
  NameChangedEventObject
>;

export type NameChangedEventFilter = TypedEventFilter<NameChangedEvent>;

export interface RewardChangedEventObject {
  _oldReward: number;
  _newReward: number;
}
export type RewardChangedEvent = TypedEvent<
  [number, number],
  RewardChangedEventObject
>;

export type RewardChangedEventFilter = TypedEventFilter<RewardChangedEvent>;

export interface Activity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ActivityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReward(overrides?: CallOverrides): Promise<[number]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    s_name(overrides?: CallOverrides): Promise<[string]>;

    s_reward(overrides?: CallOverrides): Promise<[number]>;

    setName(
      _newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReward(overrides?: CallOverrides): Promise<number>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  s_name(overrides?: CallOverrides): Promise<string>;

  s_reward(overrides?: CallOverrides): Promise<number>;

  setName(
    _newName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReward(
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activate(overrides?: CallOverrides): Promise<void>;

    deactivate(overrides?: CallOverrides): Promise<void>;

    getReward(overrides?: CallOverrides): Promise<number>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    s_name(overrides?: CallOverrides): Promise<string>;

    s_reward(overrides?: CallOverrides): Promise<number>;

    setName(_newName: string, overrides?: CallOverrides): Promise<void>;

    setReward(_reward: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Activated()"(): ActivatedEventFilter;
    Activated(): ActivatedEventFilter;

    "Deactivated()"(): DeactivatedEventFilter;
    Deactivated(): DeactivatedEventFilter;

    "NameChanged(string,string)"(
      _oldName?: null,
      _newName?: null
    ): NameChangedEventFilter;
    NameChanged(_oldName?: null, _newName?: null): NameChangedEventFilter;

    "RewardChanged(uint8,uint8)"(
      _oldReward?: null,
      _newReward?: null
    ): RewardChangedEventFilter;
    RewardChanged(
      _oldReward?: null,
      _newReward?: null
    ): RewardChangedEventFilter;
  };

  estimateGas: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReward(overrides?: CallOverrides): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    s_name(overrides?: CallOverrides): Promise<BigNumber>;

    s_reward(overrides?: CallOverrides): Promise<BigNumber>;

    setName(
      _newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setName(
      _newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
